// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia.Data;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(DbFirstContext))]
    [Migration("20240223223600_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Dominio.Entidades.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador de categoria");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasComment("Descripción de la categoria");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Categoria", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("IdDepartamentoFK")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartamentoFK");

                    b.ToTable("Ciudad", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Nombre")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Departamento", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.FacturaCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador de la factura de compra");

                    b.Property<int>("CantidadTotal")
                        .HasColumnType("int")
                        .HasComment("Cantidad total de todos los productos");

                    b.Property<int>("CantidadxProducto")
                        .HasColumnType("int")
                        .HasComment("Cantidad por productos");

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la compra");

                    b.Property<int>("IdEmpleadoFk")
                        .HasColumnType("int")
                        .HasColumnName("IdEmpleadoFK")
                        .HasComment("Identificador puenteo con la tabla de Empleado (Persona)");

                    b.Property<int>("IdProductoFk")
                        .HasColumnType("int")
                        .HasColumnName("IdProductoFK")
                        .HasComment("Identificador de puenteo con la tabla de Producto");

                    b.Property<int>("IdProveedorFk")
                        .HasColumnType("int")
                        .HasColumnName("IdProveedorFK")
                        .HasComment("Identificador de puenteo con la tabla de Proveedor");

                    b.Property<int>("IdTipoPagoFk")
                        .HasColumnType("int")
                        .HasColumnName("IdTipoPagoFK")
                        .HasComment("Identificador de puenteo con la tabla de Tipo Pago");

                    b.Property<decimal>("PrecioTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Precio total de los productos en la factura");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEmpleadoFk" }, "facturacompra_persona_FK");

                    b.HasIndex(new[] { "IdProductoFk" }, "facturacompra_producto_FK");

                    b.HasIndex(new[] { "IdProveedorFk" }, "facturacompra_proveedor_FK");

                    b.HasIndex(new[] { "IdTipoPagoFk" }, "facturacompra_tipopago_FK");

                    b.ToTable("FacturaCompra", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.FacturaVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador de una factura de venta");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasComment("Cantidad de productos");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la venta");

                    b.Property<int>("IdEmpleadoFk")
                        .HasColumnType("int")
                        .HasColumnName("IdEmpleadoFK")
                        .HasComment("Identificador de puenteo con la tabla de Empleado (Persona)");

                    b.Property<int>("IdProductoFk")
                        .HasColumnType("int")
                        .HasColumnName("IdProductoFK")
                        .HasComment("Identificador de puenteo con la tabla de Producto");

                    b.Property<int>("IdTipoPagoFk")
                        .HasColumnType("int")
                        .HasColumnName("IdTipoPagoFK")
                        .HasComment("Identificador de puenteo con la tabla de Tipo Pago");

                    b.Property<int>("Iva")
                        .HasColumnType("int")
                        .HasComment("IVA o comision por compra, establecido por el gobierno");

                    b.Property<decimal>("PrecioTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Precio total de la venta");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEmpleadoFk" }, "facturaventa_persona_FK");

                    b.HasIndex(new[] { "IdProductoFk" }, "facturaventa_producto_FK");

                    b.HasIndex(new[] { "IdTipoPagoFk" }, "facturaventa_tipopago_FK");

                    b.ToTable("FacturaVenta", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador de la persona");

                    b.Property<string>("Apellidos")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasComment("Apellidos de la persona");

                    b.Property<int>("Cedula")
                        .HasColumnType("int")
                        .HasComment("Numero de identificacion");

                    b.Property<string>("Correo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("Correo electronico de la persona");

                    b.Property<int>("IdCiudadFK")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoPersonaFk")
                        .HasColumnType("int")
                        .HasColumnName("IdTipoPersonaFK")
                        .HasComment("Identificador de puente con la tabla de Tipo Persona");

                    b.Property<string>("Nombre")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasComment("Nombre de la persona");

                    b.Property<int>("Telefono")
                        .HasColumnType("int")
                        .HasComment("Telefono de la persona");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("IdCiudadFK");

                    b.HasIndex(new[] { "IdTipoPersonaFk" }, "persona_tipopersona_FK");

                    b.HasIndex(new[] { "Cedula", "Correo", "Telefono" }, "persona_unique")
                        .IsUnique();

                    b.ToTable("Persona", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CodigoBarras")
                        .HasColumnType("int")
                        .HasComment("Codigo de barras del producto");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("Descripcion del producto");

                    b.Property<int>("IdCategoriaFk")
                        .HasColumnType("int")
                        .HasColumnName("IdCategoriaFK")
                        .HasComment("Identificador de puenteo con la tabla Categoria");

                    b.Property<string>("Marca")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasComment("Nombre de la marca del producto");

                    b.Property<string>("Nombre")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasComment("Nombre del producto");

                    b.Property<decimal>("Precio")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Precio de venta del producto");

                    b.Property<string>("Presentacion")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasComment("Presentacion del producto, si es que incluye sea desde tallas, tamaños, unidades entre otros.");

                    b.Property<int>("TotalExistencias")
                        .HasColumnType("int")
                        .HasComment("Cantidad o existencia total por producto");

                    b.Property<string>("UsoClinico")
                        .HasColumnType("enum('SI','NO')");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCategoriaFk" }, "producto_categoria_FK");

                    b.ToTable("Producto", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Proveedor", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdUserFK")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TokenExpired")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("TokenRevoked")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IdUserFK");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Dominio.Entidades.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador de rol");

                    b.Property<string>("Nombre")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasComment("Nombre del rol");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.TipoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador de tipo de pago");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("Descripcion del tipo de pago");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("TipoPago", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.TipoPersona", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasComment("Identificador de tipo de persona");

                    b.Property<string>("Nombre")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasComment("Nombre del tipo de persona");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("TipoPersona", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador de usuario");

                    b.Property<string>("Nombre")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasComment("Nombre del usuario");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasComment("Contraseña del usuario");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.UserRol", b =>
                {
                    b.Property<int>("IdUserFK")
                        .HasColumnType("int");

                    b.Property<int>("IdRolFK")
                        .HasColumnType("int");

                    b.HasKey("IdUserFK", "IdRolFK");

                    b.HasIndex("IdRolFK");

                    b.ToTable("user_rol", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Ciudad", b =>
                {
                    b.HasOne("Dominio.Entidades.Departamento", "Departamento")
                        .WithMany("Ciudades")
                        .HasForeignKey("IdDepartamentoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Dominio.Entidades.FacturaCompra", b =>
                {
                    b.HasOne("Dominio.Entidades.Persona", "IdEmpleadoFkNavigation")
                        .WithMany("FacturaCompras")
                        .HasForeignKey("IdEmpleadoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("facturacompra_persona_FK");

                    b.HasOne("Dominio.Entidades.Producto", "IdProductoFkNavigation")
                        .WithMany("FacturaCompras")
                        .HasForeignKey("IdProductoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("facturacompra_producto_FK");

                    b.HasOne("Dominio.Entidades.Proveedor", "IdProveedorFkNavigation")
                        .WithMany("FacturaCompras")
                        .HasForeignKey("IdProveedorFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("facturacompra_proveedor_FK");

                    b.HasOne("Dominio.Entidades.TipoPago", "IdTipoPagoFkNavigation")
                        .WithMany("FacturaCompras")
                        .HasForeignKey("IdTipoPagoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("facturacompra_tipopago_FK");

                    b.Navigation("IdEmpleadoFkNavigation");

                    b.Navigation("IdProductoFkNavigation");

                    b.Navigation("IdProveedorFkNavigation");

                    b.Navigation("IdTipoPagoFkNavigation");
                });

            modelBuilder.Entity("Dominio.Entidades.FacturaVenta", b =>
                {
                    b.HasOne("Dominio.Entidades.Persona", "IdEmpleadoFkNavigation")
                        .WithMany("FacturaVentas")
                        .HasForeignKey("IdEmpleadoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("facturaventa_persona_FK");

                    b.HasOne("Dominio.Entidades.Producto", "IdProductoFkNavigation")
                        .WithMany("FacturaVentas")
                        .HasForeignKey("IdProductoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("facturaventa_producto_FK");

                    b.HasOne("Dominio.Entidades.TipoPago", "IdTipoPagoFkNavigation")
                        .WithMany("FacturaVentas")
                        .HasForeignKey("IdTipoPagoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("facturaventa_tipopago_FK");

                    b.Navigation("IdEmpleadoFkNavigation");

                    b.Navigation("IdProductoFkNavigation");

                    b.Navigation("IdTipoPagoFkNavigation");
                });

            modelBuilder.Entity("Dominio.Entidades.Persona", b =>
                {
                    b.HasOne("Dominio.Entidades.Ciudad", "Ciudad")
                        .WithMany("Personas")
                        .HasForeignKey("IdCiudadFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.TipoPersona", "IdTipoPersonaFkNavigation")
                        .WithMany("Personas")
                        .HasForeignKey("IdTipoPersonaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("persona_tipopersona_FK");

                    b.Navigation("Ciudad");

                    b.Navigation("IdTipoPersonaFkNavigation");
                });

            modelBuilder.Entity("Dominio.Entidades.Producto", b =>
                {
                    b.HasOne("Dominio.Entidades.Categoria", "IdCategoriaFkNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("IdCategoriaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("producto_categoria_FK");

                    b.Navigation("IdCategoriaFkNavigation");
                });

            modelBuilder.Entity("Dominio.Entidades.RefreshToken", b =>
                {
                    b.HasOne("Dominio.Entidades.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("IdUserFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dominio.Entidades.UserRol", b =>
                {
                    b.HasOne("Dominio.Entidades.Rol", "Rol")
                        .WithMany("UserRols")
                        .HasForeignKey("IdRolFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.User", "User")
                        .WithMany("UserRols")
                        .HasForeignKey("IdUserFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dominio.Entidades.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.Entidades.Ciudad", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Dominio.Entidades.Departamento", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Dominio.Entidades.Persona", b =>
                {
                    b.Navigation("FacturaCompras");

                    b.Navigation("FacturaVentas");
                });

            modelBuilder.Entity("Dominio.Entidades.Producto", b =>
                {
                    b.Navigation("FacturaCompras");

                    b.Navigation("FacturaVentas");
                });

            modelBuilder.Entity("Dominio.Entidades.Proveedor", b =>
                {
                    b.Navigation("FacturaCompras");
                });

            modelBuilder.Entity("Dominio.Entidades.Rol", b =>
                {
                    b.Navigation("UserRols");
                });

            modelBuilder.Entity("Dominio.Entidades.TipoPago", b =>
                {
                    b.Navigation("FacturaCompras");

                    b.Navigation("FacturaVentas");
                });

            modelBuilder.Entity("Dominio.Entidades.TipoPersona", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Dominio.Entidades.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRols");
                });
#pragma warning restore 612, 618
        }
    }
}
